PROJECT_NAME="dj-events"

COMPOSE_PROJECT_NAME=${PROJECT_NAME}

SSR_PROJECT_PATH="/backend/services/ssr/${COMPOSE_PROJECT_NAME}-ssr-service"
PROXY_PROJECT_PATH="/backend/services/proxy/${COMPOSE_PROJECT_NAME}-proxy"
CMS_PROJECT_PATH="/backend/cms/${COMPOSE_PROJECT_NAME}-cms"

SSR_SERVICE_PORT=5000
CMS_SERVICE_PORT=1337

NODE_ENV=development

# Server
HOST=0.0.0.0

# ##############
# Secrets   #
# ##############

# ## API_KEYS
# Purpose: These are application-level keys used by Strapi for signing cookies and ensuring the integrity of sensitive data.
# Details:
# - Strapi uses these keys to sign and verify cookies, ensuring they are not tampered with.
# - Multiple keys are provided to allow for key rotation without breaking existing sessions.
# - Format: A comma-separated list of base64-encoded strings.
# Example Use:
# - Securing user sessions.
# - Verifying the integrity of signed data.
APP_KEYS=

# ## API_TOKEN_SALT
# Purpose: A salt used to hash API tokens in Strapi.
# Details:
# - When API tokens are created in Strapi, they are hashed using this salt before being stored in the database.
# - This ensures that even if the database is compromised, the tokens cannot be easily reversed.
# Example Use:
# - Securing API tokens for external integrations.

# ## ADMIN_JWT_SECRET
# Purpose: A salt used for hashing transfer tokens in Strapi.
# Details:
# - Transfer tokens are used for securely transferring data between environments (e.g., development to production).
# - This salt ensures that transfer tokens are securely hashed before being stored.
# Example Use:
# - Migrating data between Strapi environments.
API_TOKEN_SALT=

# ## ADMIN_JWT_SECRET
# Purpose: The secret key used to sign JSON Web Tokens (JWTs) for the Strapi admin panel.
# Details:
# - JWTs are used to authenticate admin users in Strapi.
# - This secret ensures that only tokens signed with this key are considered valid.
# Example Use:
# - Authenticating admin users in the Strapi dashboard.
ADMIN_JWT_SECRET=

# ## TRANSFER_TOKEN_SALT
# Purpose: A salt used for hashing transfer tokens in Strapi.
# Details:
# - Transfer tokens are used for securely transferring data between environments (e.g., development to production).
# - This salt ensures that transfer tokens are securely hashed before being stored.
# Example Use:
# - Migrating data between Strapi environments.
TRANSFER_TOKEN_SALT=

# Database
DATABASE_CLIENT=postgres
DATABASE_HOST=postgresql-database
DATABASE_PORT=localhost
DATABASE_NAME=strapi_database
DATABASE_USERNAME=admin
DATABASE_PASSWORD=password
DATABASE_SSL=false
DATABASE_FILENAME=.tmp/data.db

# ## JWT_SECRET
# Purpose: The secret key used to sign JSON Web Tokens (JWTs) for the Strapi application (frontend users).
# Details:
# - This is separate from the ADMIN_JWT_SECRET and is used for authenticating regular users of the application.
# - Ensures that user tokens are secure and cannot be tampered with.
# Example Use:
# - Authenticating API requests from frontend users.
JWT_SECRET=

POSTGRES_DB=${DATABASE_NAME}
POSTGRES_USER=${DATABASE_USERNAME}
POSTGRES_PASSWORD=${DATABASE_PASSWORD}

PGADMIN_DEFAULT_EMAIL=admin@example.com
PGADMIN_DEFAULT_PASSWORD=${DATABASE_PASSWORD}
PGADMIN_CONFIG_SERVER_MODE="False"
PGADMIN_CONFIG_SERVER_NAME="pgAdmin 4"
PGADMIN_CONFIG_DEFAULT_SERVER=${DATABASE_HOST}
PGADMIN_CONFIG_DEFAULT_SERVER_PORT="5432"
PGADMIN_CONFIG_DEFAULT_USERNAME=${PGADMIN_DEFAULT_EMAIL}
PGADMIN_CONFIG_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}